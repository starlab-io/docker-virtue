#!/bin/bash

start_container() {
	NAME=$1
	PORT=$2
	ADDITIONAL=$3

	[ -z "$SSHPUBKEY" ] && { echo "Error: SSHPUBKEY environment variable must be set"; exit 1; }

	echo "Ensuring that the AppArmor profile is enabled for ${NAME}"
	sudo apparmor_parser -r -W app-containers/apparmor/apparmor.${NAME}.profile

	if [ "$ADDITIONAL" == "NOSEC" ]; then
		ADDITIONAL=''
		SECOPTS=''
		echo "WARNING: Running ${NAME} with no apparmor or seccomp policies in place!"
	else
		SECOPTS="--security-opt \"apparmor=docker-${NAME}\" --security-opt \"seccomp=app-containers/seccomp/seccomp.${NAME}.json\""
		echo "SECOPTS is $SECOPTS"
	fi

	echo "Recreating service $NAME"
	echo Command: docker create -p ${PORT}:2022 -e SSHPUBKEY ${ADDITIONAL} ${SECOPTS} --name virtue_${NAME} virtue:virtue-${NAME} 

	# I give up - I have no idea why this won't work without the bash -c . Without it, you get errors by the equal signs
	bash -c "docker create -p ${PORT}:2022 -e SSHPUBKEY ${ADDITIONAL} ${SECOPTS} --name virtue_${NAME} virtue:virtue-${NAME}"

	echo "Starting service $NAME"
	docker start virtue_${NAME}
}

stop_container() {
	NAME=$1
	echo "Stopping service $NAME"
	docker stop virtue_${NAME}
}

save_container() {
	NAME=$1
	PORT=$2
	ADDITIONAL=$3

	if [ ! -d ${NAME} ]; then
		mkdir -p ${NAME}
	fi
	docker save virtue:virtue-${NAME} > ${NAME}/virtue-${NAME}.tar
	cp app-containers/apparmor/apparmor.${NAME}.profile ${NAME}/
	cp app-containers/seccomp/seccomp.${NAME}.json ${NAME}/
	cat <<- EOF > ${NAME}/run.sh
	#!/bin/bash
	sudo apparmor_parser -r -W apparmor.${NAME}.profile
	docker create --rm -p ${PORT}:2022 -e SSHPUBKEY --security-opt="apparmor=docker-${NAME}" --security-opt="seccomp=seccomp.${NAME}.json" ${ADDITIONAL} --name virtue_${NAME} virtue:virtue-${NAME}

	echo "Starting service $NAME"
	docker start virtue_${NAME}	
	EOF
}

CONFIG=${2:-Virtue.config}

case "$1" in
	build)
		# Ensure that the virtuebase is up-to-date
		docker build -t virtue:virtuebase -f virtue-base/Dockerfile.virtuebase virtue-base

		# Ensure that the crossover base is up to date
		docker build -t virtue:virtuecxbase -f app-containers/Dockerfile.virtue-crossover .

		# Read all of the Virtues out of the config file and look for Dockerfiles named
		# after the application name
		IFS=\|
		cat ${CONFIG} | while read container rest ; do
			echo "------------ Building ${container} from Dockerfile.virtue-${container} ------------"
			docker build -t virtue:virtue-${container} -f app-containers/Dockerfile.virtue-${container} .
		done
		;;
	start)
		IFS=\|
		cat ${CONFIG} | while read container port rest ; do
			start_container ${container} ${port} ${rest}
		done
		;;
	stop)
		IFS=\|
		cat ${CONFIG} | while read container rest ; do
			stop_container ${container}
		done
		;;
	save)
		IFS=\|
		cat ${CONFIG} | while read container port rest ; do
			echo "------------ Saving ${container} ------------"
			save_container ${container} ${port} ${rest}
		done
		;;
	*)
		echo "Usage: virtue [build|start|stop|save] (Virtue.config)"
		;;
esac
